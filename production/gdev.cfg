[apt]
# These dependencies are added here to avoid specialized building of
# images for only those types of builds that need these.  Instead,
# we add them for all images here to avoid that specialization and
# to save time and space on building images.
git
debhelper
rpm
# Normal dependencies
flatbuffers-compiler
libcap-dev
openjdk-8-jdk
python3-dev
shellcheck

[gaia]
production/cmake
third_party/production/backward
third_party/production/cmake
third_party/production/daemonize
third_party/production/flatbuffers
third_party/production/googletest
third_party/production/libexplain
third_party/production/liburing

[pre_run]
# This ensures that Python scripts work as expected.
update-alternatives --install "/usr/bin/python" "python" "/usr/bin/python3.8" 10
update-alternatives --install "/usr/bin/python3" "python3" "/usr/bin/python3.8" 10

# Default persistent store location.
mkdir -p /var/lib/gaia/db

# The cmake generator is set in the third_party/production/cmake subproject via the CMAKE_GENERATOR env.
{enable_if_not('SkipBuild')}[run]
mkdir -p /build/production
cd /build/production
CC=$CC CPP=$CPP CXX=$CXX LDFLAGS="$LDFLAGS" \
cmake \
    --log-level=VERBOSE -Wno-dev \
    {enable_if('Debug')}-DCMAKE_BUILD_TYPE=Debug \
    {enable_if('Release')}-DCMAKE_BUILD_TYPE=Release \
    {enable_if('RelWithDebInfo')}-DCMAKE_BUILD_TYPE=RelWithDebInfo \
    {enable_if_any('Debug', 'Release', 'RelWithDebInfo')}-DEXECUTE_FDW_TESTS=ON \
    {source_dir('production')}

# LSAN will cause failures during docker build time since we cannot allow the
# build context to have privileged information about the host system.  Doing so
# would make it impossible to make these builds repeatable. It only needs to be
# disabled during `gdev build` (`docker build` under the hood), but the same is
# not true while inside a container built by `gdev run` (`docker run` under the
# hood) since we do enable privileged information about the host system in that
# context.
export ASAN_OPTIONS=detect_leaks=0

# Using $(nproc) to define the number of jobs to avoid OOM in TeamCity.
bash -c "cmake --build . --target all --parallel $(nproc) 1> >(tee /build/production/make-out.log) 2> >(tee /build/production/make-err.log >&2)"

# Database needs to be in well-known path for tests to pass.
cmake --install db/core
